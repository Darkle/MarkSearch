extends layout
block vars
  - var bodyClass = 'settingsPage';
block content
  .settingsSaveCancelButtons
    .saveSettingsButton Save
    .cancelSettingsButton Cancel


  #settingsContainer

    //.settingsHeader Changes Are Automatically Saved
    .settings
      input#csrfInput(type="hidden", name="_csrf", value="#{csrfToken}")
      .genTokenOuterContainer
        .browserTokenTitle Browser Token
        .genTokenContainer
          a#browserAddonTokenButton.button.black.square(href="#") Generate Browser Token
          .formplate
            input#browserAddonTokenText.square(type="text", name="browserAddonTokenText")
            a.clipBoardButton.button.square(data-clipboard-target="#browserAddonTokenText")
              img(src="images/clippy.svg", alt="Copy to clipboard")
        .settingDetail.
          This token is used in the MarkSearch browser extension. More info info
          is available on the <a class='externalLink' href="/help#browserAddon">Help Page</a>
      .bookmarkletContainer
        .bookmarkletTokenTitle Bookmarklet
        .genTokenContainer
          a#bookmarkletButton.button.black.square(href="#") Generate Bookmarklet
          .formplate
            input#bookmarkletText.square(type="text", name="bookmarkletText")
            a.clipBoardButton.button.square(data-clipboard-target="#bookmarkletText")
              img(src="images/clippy.svg", alt="Copy to clipboard")
        .genTokenContainer
          a#emailBookmarkletButton.button.black.square(href="#") Email Bookmarklet
          .formplate
            input#bookmarkletEmail.square(type="text", name="bookmarkletEmail")
        .settingDetail
          p.
            You can use the bookmarklet to save pages from browsers that cant run extensions (e.g. mobile
            browsers). You can either generate the bookmarklet text and copy & paste, or you can have the
            bookmarklet emailed to you. More info info
            is available on the <a class='externalLink' href="/help#bookmarklet">Help Page</a>
          p.
            Note: unfortunately the bookmarklet will not work on https pages.
      .prebrowsingSettingContainer
        .formplate
          input#prebrowsingCheckbox(type="checkbox", name="prebrowsingCheckbox")
          label(for="prebrowsingCheckbox") Prebrowsing
        .settingDetail.
          When enabled, the first two results on the MarkSearch search page will have prebrowsing applied to them.
          Prebrowsing can make bookmark links load faster when you click on
          them from the search page. (The first result will have "preconnect" applied, while the second
          result will have "dns-prefetch" applied. More info <a class='externalLink' target="_blank" href='http://blog.cloudimage.io/2015/10/19/what-is-prebrowsing-and-how-it-can-drastically-improve-your-page-loading-time/'>here</a>)
      .alwaysDisableTooltipsSettingContainer
        .formplate
          input#alwaysDisableTooltipsCheckbox(type="checkbox", name="alwaysDisableTooltipsCheckbox")
          label(for="alwaysDisableTooltipsCheckbox") Always Disable Tooltips
        .settingDetail.
          MarkSearch shows tooltips when you hover over icons on the MarkSearch search page. It does this until there have been pages saved to the database and there has been at least one result shown. This is done to help the user know what the icons do. If you are always running in incognito mode, then you probably want to always disable the tooltips.
      .bookmarkExpiryContainer
        .bookmarkExpirySettings
          .formplate
            input#bookmarkExpiryCheckbox(type="checkbox", name="bookmarkExpiryCheckbox")
            label(for="bookmarkExpiryCheckbox") Bookmark Expiry
          .formplate
            select#bookmarkExpirySelect
              option(value="3") Every 3 Months
              option(value="6") Every 6 Months
          .formplate
            input#bookmarkExpiryEmail.square(type="text", name="bookmarkExpiryEmail", placeholder="Enter Email Address")
        .settingDetail
          p.
            MarkSearch can check every 3 or 6 months for old bookmarks and then email you
            with details of the old bookmarks. In the email, you are given a link to a page where you can delete the old
            bookmarks from MarkSearch.
          p.
            MarkSearch remembers which links it has already checked, so you wont get an email with previously
            checked links.
      .dbLocationContainer
        .currentLocation
          span#dbLocationInfoTitle Current Database Location:
          span.locationText
        .changeDBLocationButtonContainer
          input#changeDBLocationInput(type="file" webkitdirectory directory)
          a#changeDBLocationButton.button.black.square(href="#") Change Directory
        .settingDetail.
          You can change where your MarkSearch database is stored. This is useful for
          if you want to have your bookmarks automatically backed up (e.g. putting them in
          a Dropbox folder). <strong>Note: if you already have a
          file named "MarkSearchPages.db" in that directory, it will be overwritten.</strong>
      .revokeContainer
        .revokeTitle Revoke All Tokens
        .revokeButtonsContainer
          a#revokeTokens.button.black.square(href="#") Revoke All Tokens
        .settingDetail
          p.
            Use this button to revoke all tokens generated for extensions or bookmarklets.
      .trayIconContainer
        .trayIconSettings
          .trayIconTitle Tray Icon Color
          .formplate
            select#trayIconSelect
              option(value="blue") Blue
              option(value="black") Black
              option(value="white") White
        .settingDetail
          p.
            This setting allows you to change the color of the MarkSearch system tray icon.
          p.
            Note: once you save this setting, you will have to restart MarkSearch for the new
            icon to be shown.
      .importContainer
        .importTitle Import Bookmarks
        .importButtonsContainer
          input#importHTMLFileInput(type="file", data-import-type="html")
          input#importTextFileInput(type="file", data-import-type="text")
          a#importHTMLFileButton.button.black.square(href="#") Import Bookmarks.html File
          a#importTextFileButton.button.black.square(href="#") Import Plain Text File
        .settingDetail
          p.
            You can import Bookmarks into MarkSearch using either a Netscape Bookmarks html file or a Plain Text file.
          p.
            Netscape Bookmarks html files can be exported by Chrome, Firefox and IE, so you can export your bookmarks from
            those browsers and then import them into MarkSearch.
          p.
            You can also import bookmarks from Instapaper, Pocket & Pinboard using the "Import Bookmarks.html File" method.
            Note: make sure when exporting your bookmarks from Instapaper or Pinboard, that you choose the "html" export method.
          p.
            You can also import Bookmarks via a plain text file. The plain text file must contain a URL on each new line.
          p.
            When importing, MarkSearch scrapes the web page for each Bookmark URL you are importing, so the import may take some time if
            there are a large number of URLs to import/scrape.
      .exportContainer
        .exportTitle Export Bookmarks
        .exportButtonsContainer
          //input#exportHTMLFileInput(type="file")
          //input#exportTextFileInput(type="file")
          a#exportHTMLFileButton.button.black.square(href="#") Export As Bookmarks.html File
          a#exportTextFileButton.button.black.square(href="#") Export As Plain Text File
        .settingDetail
          p.
            Exporting as a Bookmarks.html file (aka Netscape Bookmarks html file) will allow you to import your MarkSearch
            Bookmarks into Chrome, Firefox & IE.
          p.
            Exporting as a Plain Text file will export all your MarkSearch Bookmarks as plain text with each Bookmarks URL on a new line
            in the file.

  //#formPlateFontHack.formplate
  //  .formplate-checkbox.checked

  script(src='/bower_components/jquery/dist/jquery.min.js')
  script(src='/bower_components/Formplate/js/min/formplate.js')
  script(src='/bower_components/buttonplate/js/min/buttonplate.js')
  script(src='/bower_components/clipboard/dist/clipboard.min.js')
  script(src='/bower_components/notie/dist/notie.min.js')
  script(src='/js/settingsPage-bundle.js')

