extends layout
block vars
  - var bodyClass = 'settingsPage';
block content
  #settingsContainer

    //.settingsHeader Changes Are Automatically Saved

    .settings
      input#csrfInput(type="hidden", name="_csrf", value="#{csrfToken}")
      .genTokenOuterContainer
        .browserTokenTitle Browser Token
        .genTokenContainer
          a#browserAddonTokenButton.button.black.square(href="#") Generate Browser Token
          .formplate
            input#browserAddonTokenText.square(type="text", name="browserAddonTokenText")
            a.clipBoardButton.button.square(data-clipboard-target="#browserAddonTokenText")
              img(src="images/clippy.svg", alt="Copy to clipboard")
        .settingDetail.
          This token is used in the MarkSearch browser extension. More info info
          is available on the <a href="/helpPage#browserAddon">Help Page</a>
      .bookmarkletContainer
        .bookmarkletTokenTitle Bookmarklet
        .genTokenContainer
          a#bookmarkletButton.button.black.square(href="#") Generate Bookmarklet
          .formplate
            input#bookmarkletText.square(type="text", name="bookmarkletText")
            a.clipBoardButton.button.square(data-clipboard-target="#bookmarkletText")
              img(src="images/clippy.svg", alt="Copy to clipboard")
        .genTokenContainer
          a#emailBookmarkletButton.button.black.square(href="#") Email Bookmarklet
          .formplate
            input#bookmarkletEmail.square(type="text", name="bookmarkletEmail")
        .settingDetail.
          You can use the bookmarklet to save pages from browsers that cant run extensions (e.g. mobile
          browsers). You can either generate the bookmarklet text and copy & paste, or you can have the
          bookmarklet emailed to you. More info info
          is available on the <a href="/helpPage#bookmarklet">Help Page</a>
      .prebrowsingSettingContainer
        .formplate
          input#prebrowsingCheckbox(type="checkbox", name="prebrowsingCheckbox")
          label(for="prebrowsingCheckbox") Prebrowsing
        .settingDetail.
          When enabled, the first two results on the MarkSearch search page will have prebrowsing applied to them.
          Prebrowsing can make bookmark links load faster when you click on
          them from the search page. (The first result will have "preconnect" applied, while the second
          result will have "dns-prefetch" applied. More info <a class='externalLink' target="_blank" href='http://blog.cloudimage.io/2015/10/19/what-is-prebrowsing-and-how-it-can-drastically-improve-your-page-loading-time/'>here</a>)
      .alwaysDisableTooltipsSettingContainer
        .formplate
          input#alwaysDisableTooltipsCheckbox(type="checkbox", name="alwaysDisableTooltipsCheckbox")
          label(for="alwaysDisableTooltipsCheckbox") Always Disable Tooltips
        .settingDetail.
          MarkSearch shows tooltips when you hover over icons on the MarkSearch search page. It does this until there have been pages saved to the database and there has been at least one result shown. This is done to help the user know what the icons do. If you are always running in incognito mode, then you probably want to always disable the tooltips.
      .dbLocationContainer
        .currentLocation
          span#dbLocationInfoTitle Current Database Location:
          span.locationText
        //#dragAndDropContainer
        //  #dragAndDrop Drag Folder Here
        .changeDBLocationButtonContainer
          input#changeDBLocationInput(type="file" webkitdirectory directory)
          a#changeDBLocationButton.button.black.square(href="#") Change Directory
        .settingDetail.
          You can change where your MarkSearch database is stored. This is useful for
          if you want to have your bookmarks automatically backed up (e.g. putting them in
          a Dropbox folder). <strong>Note: if you already have a
          file named "MarkSearchPages.db" in that directory, it will be overwritten.</strong>
      .importContainer
        .importTitle Import URLs
        .importButtonsContainer
          input#importHTMLFileInput(type="file")
          input#importTextFileInput(type="file")
          a#importHTMLFileButton.button.black.square(href="#") Import Bookmarks.html File
          a#importTextFileButton.button.black.square(href="#") Import Plain Text File
        .settingDetail
          p.
            You can import URLs into MarkSearch using either a Netscape Bookmarks html file or a Plain Text file.
          p.
            Netscape Bookmarks html files can be exported by Chrome, Firefox and IE, so you can export your bookmarks from
            those browsers and then import them into MarkSearch.
          p.
            You can also import bookmarks from Instapaper, Pocket & Pinboard using the "Import Bookmarks.html File" method.
            Note: make sure when exporting your bookmarks from Instapaper or Pinboard, that you choose the "html" export method.
          p.
            You can also import URLs via a plain text file. The plain text file must contain a url on each new line.
          p.
            When importing, MarkSearch scrapes the web page for each URL you are importing, so the import may take some time if
            there are a large number of URLs to import/scrape.
      .exportContainer
        .exportTitle Export URLs
        .exportButtonsContainer
          a#exportHTMLFileButton.button.black.square(href="#") Export As Bookmarks.html File
          a#exportTextFileButton.button.black.square(href="#") Export As Plain Text File
          a#exportPlainHTMLFileButton.button.black.square(href="#") Export As Plain HTML File
        .settingDetail
          p.
            Exporting as a Bookmarkls.html file (aka Netscape Bookmarks html file) will allow you to import your MarkSearch
            URLs into Chrome, Firefox & IE.
          p.
            Exporting as a Plain Text file will export all your MarkSearch URLs as plain text with each URL on a new line
            in the file.
          p.
            Exporting as a Plain HTML file will export your MarkSearch URLs into an html file with the URLs as links, so
            you could then open that html file in a browser and click on the links to open them.

  .settingsSaveCancelButtons
    .saveSettingsButton Save
    .cancelSettingsButton Cancel


  //#formPlateFontHack.formplate
  //  .formplate-checkbox.checked

  script(src='/bower_components/jquery/dist/jquery.js')
  script(src='/bower_components/Formplate/js/formplate.js')
  script(src='/bower_components/buttonplate/js/buttonplate.js')
  script(src='/bower_components/clipboard/dist/clipboard.min.js')
  script(type='text/javascript').
    var markSearchSettings = !{markSearchSettings}
  script(src='/js/settingsPage-bundle.js')

